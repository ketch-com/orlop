// Code generated by MockGen. DO NOT EDIT.
// Source: client_config.go

// Package orlop_test is a generated GoMock package.
package orlop_test

import (
	gomock "github.com/golang/mock/gomock"
	orlop "github.com/switch-bit/orlop"
	reflect "reflect"
	time "time"
)

// MockHasClientConfig is a mock of HasClientConfig interface
type MockHasClientConfig struct {
	ctrl     *gomock.Controller
	recorder *MockHasClientConfigMockRecorder
}

// MockHasClientConfigMockRecorder is the mock recorder for MockHasClientConfig
type MockHasClientConfigMockRecorder struct {
	mock *MockHasClientConfig
}

// NewMockHasClientConfig creates a new mock instance
func NewMockHasClientConfig(ctrl *gomock.Controller) *MockHasClientConfig {
	mock := &MockHasClientConfig{ctrl: ctrl}
	mock.recorder = &MockHasClientConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHasClientConfig) EXPECT() *MockHasClientConfigMockRecorder {
	return m.recorder
}

// GetTLS mocks base method
func (m *MockHasClientConfig) GetTLS() orlop.HasTLSConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTLS")
	ret0, _ := ret[0].(orlop.HasTLSConfig)
	return ret0
}

// GetTLS indicates an expected call of GetTLS
func (mr *MockHasClientConfigMockRecorder) GetTLS() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTLS", reflect.TypeOf((*MockHasClientConfig)(nil).GetTLS))
}

// GetToken mocks base method
func (m *MockHasClientConfig) GetToken() orlop.HasTokenConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken")
	ret0, _ := ret[0].(orlop.HasTokenConfig)
	return ret0
}

// GetToken indicates an expected call of GetToken
func (mr *MockHasClientConfigMockRecorder) GetToken() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockHasClientConfig)(nil).GetToken))
}

// GetURL mocks base method
func (m *MockHasClientConfig) GetURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetURL indicates an expected call of GetURL
func (mr *MockHasClientConfigMockRecorder) GetURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockHasClientConfig)(nil).GetURL))
}

// GetHeaders mocks base method
func (m *MockHasClientConfig) GetHeaders() map[string]string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaders")
	ret0, _ := ret[0].(map[string]string)
	return ret0
}

// GetHeaders indicates an expected call of GetHeaders
func (mr *MockHasClientConfigMockRecorder) GetHeaders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaders", reflect.TypeOf((*MockHasClientConfig)(nil).GetHeaders))
}

// GetWriteBufferSize mocks base method
func (m *MockHasClientConfig) GetWriteBufferSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWriteBufferSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetWriteBufferSize indicates an expected call of GetWriteBufferSize
func (mr *MockHasClientConfigMockRecorder) GetWriteBufferSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriteBufferSize", reflect.TypeOf((*MockHasClientConfig)(nil).GetWriteBufferSize))
}

// GetReadBufferSize mocks base method
func (m *MockHasClientConfig) GetReadBufferSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReadBufferSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetReadBufferSize indicates an expected call of GetReadBufferSize
func (mr *MockHasClientConfigMockRecorder) GetReadBufferSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReadBufferSize", reflect.TypeOf((*MockHasClientConfig)(nil).GetReadBufferSize))
}

// GetInitialWindowSize mocks base method
func (m *MockHasClientConfig) GetInitialWindowSize() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialWindowSize")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetInitialWindowSize indicates an expected call of GetInitialWindowSize
func (mr *MockHasClientConfigMockRecorder) GetInitialWindowSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialWindowSize", reflect.TypeOf((*MockHasClientConfig)(nil).GetInitialWindowSize))
}

// GetInitialConnWindowSize mocks base method
func (m *MockHasClientConfig) GetInitialConnWindowSize() int32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInitialConnWindowSize")
	ret0, _ := ret[0].(int32)
	return ret0
}

// GetInitialConnWindowSize indicates an expected call of GetInitialConnWindowSize
func (mr *MockHasClientConfigMockRecorder) GetInitialConnWindowSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInitialConnWindowSize", reflect.TypeOf((*MockHasClientConfig)(nil).GetInitialConnWindowSize))
}

// GetMaxCallRecvMsgSize mocks base method
func (m *MockHasClientConfig) GetMaxCallRecvMsgSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxCallRecvMsgSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxCallRecvMsgSize indicates an expected call of GetMaxCallRecvMsgSize
func (mr *MockHasClientConfigMockRecorder) GetMaxCallRecvMsgSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxCallRecvMsgSize", reflect.TypeOf((*MockHasClientConfig)(nil).GetMaxCallRecvMsgSize))
}

// GetMaxCallSendMsgSize mocks base method
func (m *MockHasClientConfig) GetMaxCallSendMsgSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxCallSendMsgSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxCallSendMsgSize indicates an expected call of GetMaxCallSendMsgSize
func (mr *MockHasClientConfigMockRecorder) GetMaxCallSendMsgSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxCallSendMsgSize", reflect.TypeOf((*MockHasClientConfig)(nil).GetMaxCallSendMsgSize))
}

// GetMinConnectTimeout mocks base method
func (m *MockHasClientConfig) GetMinConnectTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMinConnectTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetMinConnectTimeout indicates an expected call of GetMinConnectTimeout
func (mr *MockHasClientConfigMockRecorder) GetMinConnectTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMinConnectTimeout", reflect.TypeOf((*MockHasClientConfig)(nil).GetMinConnectTimeout))
}

// GetBlock mocks base method
func (m *MockHasClientConfig) GetBlock() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlock")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetBlock indicates an expected call of GetBlock
func (mr *MockHasClientConfigMockRecorder) GetBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlock", reflect.TypeOf((*MockHasClientConfig)(nil).GetBlock))
}

// GetConnTimeout mocks base method
func (m *MockHasClientConfig) GetConnTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetConnTimeout indicates an expected call of GetConnTimeout
func (mr *MockHasClientConfigMockRecorder) GetConnTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnTimeout", reflect.TypeOf((*MockHasClientConfig)(nil).GetConnTimeout))
}

// GetUserAgent mocks base method
func (m *MockHasClientConfig) GetUserAgent() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAgent")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUserAgent indicates an expected call of GetUserAgent
func (mr *MockHasClientConfigMockRecorder) GetUserAgent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAgent", reflect.TypeOf((*MockHasClientConfig)(nil).GetUserAgent))
}
