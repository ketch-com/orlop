// Code generated by MockGen. DO NOT EDIT.
// Source: cert_generation_config.go

// Package orlop_test is a generated GoMock package.
package orlop_test

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockHasCertGenerationConfig is a mock of HasCertGenerationConfig interface
type MockHasCertGenerationConfig struct {
	ctrl     *gomock.Controller
	recorder *MockHasCertGenerationConfigMockRecorder
}

// MockHasCertGenerationConfigMockRecorder is the mock recorder for MockHasCertGenerationConfig
type MockHasCertGenerationConfigMockRecorder struct {
	mock *MockHasCertGenerationConfig
}

// NewMockHasCertGenerationConfig creates a new mock instance
func NewMockHasCertGenerationConfig(ctrl *gomock.Controller) *MockHasCertGenerationConfig {
	mock := &MockHasCertGenerationConfig{ctrl: ctrl}
	mock.recorder = &MockHasCertGenerationConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHasCertGenerationConfig) EXPECT() *MockHasCertGenerationConfigMockRecorder {
	return m.recorder
}

// GetEnabled mocks base method
func (m *MockHasCertGenerationConfig) GetEnabled() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEnabled")
	ret0, _ := ret[0].(bool)
	return ret0
}

// GetEnabled indicates an expected call of GetEnabled
func (mr *MockHasCertGenerationConfigMockRecorder) GetEnabled() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEnabled", reflect.TypeOf((*MockHasCertGenerationConfig)(nil).GetEnabled))
}

// GetPath mocks base method
func (m *MockHasCertGenerationConfig) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath
func (mr *MockHasCertGenerationConfigMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockHasCertGenerationConfig)(nil).GetPath))
}

// GetCommonName mocks base method
func (m *MockHasCertGenerationConfig) GetCommonName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommonName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCommonName indicates an expected call of GetCommonName
func (mr *MockHasCertGenerationConfigMockRecorder) GetCommonName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommonName", reflect.TypeOf((*MockHasCertGenerationConfig)(nil).GetCommonName))
}

// GetAltNames mocks base method
func (m *MockHasCertGenerationConfig) GetAltNames() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAltNames")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAltNames indicates an expected call of GetAltNames
func (mr *MockHasCertGenerationConfigMockRecorder) GetAltNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAltNames", reflect.TypeOf((*MockHasCertGenerationConfig)(nil).GetAltNames))
}

// GetTTL mocks base method
func (m *MockHasCertGenerationConfig) GetTTL() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTTL")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTTL indicates an expected call of GetTTL
func (mr *MockHasCertGenerationConfigMockRecorder) GetTTL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTTL", reflect.TypeOf((*MockHasCertGenerationConfig)(nil).GetTTL))
}
