// Code generated by mockery v2.14.0. DO NOT EDIT.

package internal

import (
	mock "github.com/stretchr/testify/mock"
	status "google.golang.org/grpc/internal/status"
)

// GRPCStatus is an autogenerated mock type for the GRPCStatus type
type GRPCStatus struct {
	mock.Mock
}

type GRPCStatus_Expecter struct {
	mock *mock.Mock
}

func (_m *GRPCStatus) EXPECT() *GRPCStatus_Expecter {
	return &GRPCStatus_Expecter{mock: &_m.Mock}
}

// GRPCStatus provides a mock function with given fields:
func (_m *GRPCStatus) GRPCStatus() *status.Status {
	ret := _m.Called()

	var r0 *status.Status
	if rf, ok := ret.Get(0).(func() *status.Status); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*status.Status)
		}
	}

	return r0
}

// GRPCStatus_GRPCStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GRPCStatus'
type GRPCStatus_GRPCStatus_Call struct {
	*mock.Call
}

// GRPCStatus is a helper method to define mock.On call
func (_e *GRPCStatus_Expecter) GRPCStatus() *GRPCStatus_GRPCStatus_Call {
	return &GRPCStatus_GRPCStatus_Call{Call: _e.mock.On("GRPCStatus")}
}

func (_c *GRPCStatus_GRPCStatus_Call) Run(run func()) *GRPCStatus_GRPCStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GRPCStatus_GRPCStatus_Call) Return(_a0 *status.Status) *GRPCStatus_GRPCStatus_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewGRPCStatus interface {
	mock.TestingT
	Cleanup(func())
}

// NewGRPCStatus creates a new instance of GRPCStatus. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGRPCStatus(t mockConstructorTestingTNewGRPCStatus) *GRPCStatus {
	mock := &GRPCStatus{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
