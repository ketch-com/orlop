// Code generated by mockery v2.14.0. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"

// Status is an autogenerated mock type for the Status type
type Status struct {
	mock.Mock
}

type Status_Expecter struct {
	mock *mock.Mock
}

func (_m *Status) EXPECT() *Status_Expecter {
	return &Status_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields:
func (_m *Status) Error() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Status_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Status_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *Status_Expecter) Error() *Status_Error_Call {
	return &Status_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *Status_Error_Call) Run(run func()) *Status_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Status_Error_Call) Return(_a0 string) *Status_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

// Status provides a mock function with given fields:
func (_m *Status) Status() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Status_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type Status_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *Status_Expecter) Status() *Status_Status_Call {
	return &Status_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *Status_Status_Call) Run(run func()) *Status_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Status_Status_Call) Return(_a0 int) *Status_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewStatus interface {
	mock.TestingT
	Cleanup(func())
}

// NewStatus creates a new instance of Status. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStatus(t mockConstructorTestingTNewStatus) *Status {
	mock := &Status{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
