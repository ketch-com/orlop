// Code generated by mockery v2.14.0. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"

// ErrorCode is an autogenerated mock type for the ErrorCode type
type ErrorCode struct {
	mock.Mock
}

type ErrorCode_Expecter struct {
	mock *mock.Mock
}

func (_m *ErrorCode) EXPECT() *ErrorCode_Expecter {
	return &ErrorCode_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields:
func (_m *ErrorCode) Error() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ErrorCode_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type ErrorCode_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *ErrorCode_Expecter) Error() *ErrorCode_Error_Call {
	return &ErrorCode_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *ErrorCode_Error_Call) Run(run func()) *ErrorCode_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ErrorCode_Error_Call) Return(_a0 string) *ErrorCode_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

// ErrorCode provides a mock function with given fields:
func (_m *ErrorCode) ErrorCode() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ErrorCode_ErrorCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ErrorCode'
type ErrorCode_ErrorCode_Call struct {
	*mock.Call
}

// ErrorCode is a helper method to define mock.On call
func (_e *ErrorCode_Expecter) ErrorCode() *ErrorCode_ErrorCode_Call {
	return &ErrorCode_ErrorCode_Call{Call: _e.mock.On("ErrorCode")}
}

func (_c *ErrorCode_ErrorCode_Call) Run(run func()) *ErrorCode_ErrorCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ErrorCode_ErrorCode_Call) Return(_a0 string) *ErrorCode_ErrorCode_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewErrorCode interface {
	mock.TestingT
	Cleanup(func())
}

// NewErrorCode creates a new instance of ErrorCode. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewErrorCode(t mockConstructorTestingTNewErrorCode) *ErrorCode {
	mock := &ErrorCode{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
