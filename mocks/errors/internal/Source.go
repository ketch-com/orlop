// Code generated by mockery v2.14.0. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"

// Source is an autogenerated mock type for the Source type
type Source struct {
	mock.Mock
}

type Source_Expecter struct {
	mock *mock.Mock
}

func (_m *Source) EXPECT() *Source_Expecter {
	return &Source_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields:
func (_m *Source) Error() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Source_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Source_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *Source_Expecter) Error() *Source_Error_Call {
	return &Source_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *Source_Error_Call) Run(run func()) *Source_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Source_Error_Call) Return(_a0 string) *Source_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

// Source provides a mock function with given fields:
func (_m *Source) Source() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Source_Source_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Source'
type Source_Source_Call struct {
	*mock.Call
}

// Source is a helper method to define mock.On call
func (_e *Source_Expecter) Source() *Source_Source_Call {
	return &Source_Source_Call{Call: _e.mock.On("Source")}
}

func (_c *Source_Source_Call) Run(run func()) *Source_Source_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Source_Source_Call) Return(_a0 string) *Source_Source_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSource interface {
	mock.TestingT
	Cleanup(func())
}

// NewSource creates a new instance of Source. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSource(t mockConstructorTestingTNewSource) *Source {
	mock := &Source{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
