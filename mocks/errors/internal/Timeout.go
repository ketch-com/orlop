// Code generated by mockery v2.14.0. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"

// Timeout is an autogenerated mock type for the Timeout type
type Timeout struct {
	mock.Mock
}

type Timeout_Expecter struct {
	mock *mock.Mock
}

func (_m *Timeout) EXPECT() *Timeout_Expecter {
	return &Timeout_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields:
func (_m *Timeout) Error() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Timeout_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Timeout_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *Timeout_Expecter) Error() *Timeout_Error_Call {
	return &Timeout_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *Timeout_Error_Call) Run(run func()) *Timeout_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Timeout_Error_Call) Return(_a0 string) *Timeout_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

// Timeout provides a mock function with given fields:
func (_m *Timeout) Timeout() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Timeout_Timeout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Timeout'
type Timeout_Timeout_Call struct {
	*mock.Call
}

// Timeout is a helper method to define mock.On call
func (_e *Timeout_Expecter) Timeout() *Timeout_Timeout_Call {
	return &Timeout_Timeout_Call{Call: _e.mock.On("Timeout")}
}

func (_c *Timeout_Timeout_Call) Run(run func()) *Timeout_Timeout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Timeout_Timeout_Call) Return(_a0 bool) *Timeout_Timeout_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTimeout interface {
	mock.TestingT
	Cleanup(func())
}

// NewTimeout creates a new instance of Timeout. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTimeout(t mockConstructorTestingTNewTimeout) *Timeout {
	mock := &Timeout{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
