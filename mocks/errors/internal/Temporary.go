// Code generated by mockery v2.14.0. DO NOT EDIT.

package internal

import mock "github.com/stretchr/testify/mock"

// Temporary is an autogenerated mock type for the Temporary type
type Temporary struct {
	mock.Mock
}

type Temporary_Expecter struct {
	mock *mock.Mock
}

func (_m *Temporary) EXPECT() *Temporary_Expecter {
	return &Temporary_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with given fields:
func (_m *Temporary) Error() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Temporary_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type Temporary_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *Temporary_Expecter) Error() *Temporary_Error_Call {
	return &Temporary_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *Temporary_Error_Call) Run(run func()) *Temporary_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Temporary_Error_Call) Return(_a0 string) *Temporary_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

// Temporary provides a mock function with given fields:
func (_m *Temporary) Temporary() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Temporary_Temporary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Temporary'
type Temporary_Temporary_Call struct {
	*mock.Call
}

// Temporary is a helper method to define mock.On call
func (_e *Temporary_Expecter) Temporary() *Temporary_Temporary_Call {
	return &Temporary_Temporary_Call{Call: _e.mock.On("Temporary")}
}

func (_c *Temporary_Temporary_Call) Run(run func()) *Temporary_Temporary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Temporary_Temporary_Call) Return(_a0 bool) *Temporary_Temporary_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewTemporary interface {
	mock.TestingT
	Cleanup(func())
}

// NewTemporary creates a new instance of Temporary. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTemporary(t mockConstructorTestingTNewTemporary) *Temporary {
	mock := &Temporary{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
