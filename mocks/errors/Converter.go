// Code generated by mockery v2.14.0. DO NOT EDIT.

package errors

import mock "github.com/stretchr/testify/mock"

// Converter is an autogenerated mock type for the Converter type
type Converter struct {
	mock.Mock
}

type Converter_Expecter struct {
	mock *mock.Mock
}

func (_m *Converter) EXPECT() *Converter_Expecter {
	return &Converter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: err
func (_m *Converter) Execute(err error) (error, bool) {
	ret := _m.Called(err)

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(error) bool); ok {
		r1 = rf(err)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// Converter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Converter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - err error
func (_e *Converter_Expecter) Execute(err interface{}) *Converter_Execute_Call {
	return &Converter_Execute_Call{Call: _e.mock.On("Execute", err)}
}

func (_c *Converter_Execute_Call) Run(run func(err error)) *Converter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *Converter_Execute_Call) Return(_a0 error, _a1 bool) *Converter_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewConverter interface {
	mock.TestingT
	Cleanup(func())
}

// NewConverter creates a new instance of Converter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConverter(t mockConstructorTestingTNewConverter) *Converter {
	mock := &Converter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
