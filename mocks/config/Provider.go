// Code generated by mockery v2.14.0. DO NOT EDIT.

package config

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Provider is an autogenerated mock type for the Provider type
type Provider struct {
	mock.Mock
}

type Provider_Expecter struct {
	mock *mock.Mock
}

func (_m *Provider) EXPECT() *Provider_Expecter {
	return &Provider_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, service
func (_m *Provider) Get(ctx context.Context, service string) (interface{}, error) {
	ret := _m.Called(ctx, service)

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string) interface{}); ok {
		r0 = rf(ctx, service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Provider_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - service string
func (_e *Provider_Expecter) Get(ctx interface{}, service interface{}) *Provider_Get_Call {
	return &Provider_Get_Call{Call: _e.mock.On("Get", ctx, service)}
}

func (_c *Provider_Get_Call) Run(run func(ctx context.Context, service string)) *Provider_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Provider_Get_Call) Return(_a0 interface{}, _a1 error) *Provider_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *Provider) List(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Provider_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Provider_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - ctx context.Context
func (_e *Provider_Expecter) List(ctx interface{}) *Provider_List_Call {
	return &Provider_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *Provider_List_Call) Run(run func(ctx context.Context)) *Provider_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Provider_List_Call) Return(_a0 []string, _a1 error) *Provider_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewProvider interface {
	mock.TestingT
	Cleanup(func())
}

// NewProvider creates a new instance of Provider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProvider(t mockConstructorTestingTNewProvider) *Provider {
	mock := &Provider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
