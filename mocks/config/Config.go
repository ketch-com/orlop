// Code generated by mockery v2.14.0. DO NOT EDIT.

package config

import (
	mock "github.com/stretchr/testify/mock"
	fx "go.uber.org/fx"
)

// Config is an autogenerated mock type for the Config type
type Config struct {
	mock.Mock
}

type Config_Expecter struct {
	mock *mock.Mock
}

func (_m *Config) EXPECT() *Config_Expecter {
	return &Config_Expecter{mock: &_m.Mock}
}

// Options provides a mock function with given fields:
func (_m *Config) Options() fx.Option {
	ret := _m.Called()

	var r0 fx.Option
	if rf, ok := ret.Get(0).(func() fx.Option); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fx.Option)
		}
	}

	return r0
}

// Config_Options_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Options'
type Config_Options_Call struct {
	*mock.Call
}

// Options is a helper method to define mock.On call
func (_e *Config_Expecter) Options() *Config_Options_Call {
	return &Config_Options_Call{Call: _e.mock.On("Options")}
}

func (_c *Config_Options_Call) Run(run func()) *Config_Options_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Config_Options_Call) Return(_a0 fx.Option) *Config_Options_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewConfig interface {
	mock.TestingT
	Cleanup(func())
}

// NewConfig creates a new instance of Config. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConfig(t mockConstructorTestingTNewConfig) *Config {
	mock := &Config{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
