// Code generated by mockery v2.14.0. DO NOT EDIT.

package config

import (
	reflect "reflect"

	mock "github.com/stretchr/testify/mock"
)

// FieldSetter is an autogenerated mock type for the fieldSetter type
type FieldSetter struct {
	mock.Mock
}

type FieldSetter_Expecter struct {
	mock *mock.Mock
}

func (_m *FieldSetter) EXPECT() *FieldSetter_Expecter {
	return &FieldSetter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: value, input
func (_m *FieldSetter) Execute(value reflect.Value, input string) error {
	ret := _m.Called(value, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(reflect.Value, string) error); ok {
		r0 = rf(value, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FieldSetter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type FieldSetter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - value reflect.Value
//  - input string
func (_e *FieldSetter_Expecter) Execute(value interface{}, input interface{}) *FieldSetter_Execute_Call {
	return &FieldSetter_Execute_Call{Call: _e.mock.On("Execute", value, input)}
}

func (_c *FieldSetter_Execute_Call) Run(run func(value reflect.Value, input string)) *FieldSetter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(reflect.Value), args[1].(string))
	})
	return _c
}

func (_c *FieldSetter_Execute_Call) Return(_a0 error) *FieldSetter_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewFieldSetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewFieldSetter creates a new instance of FieldSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFieldSetter(t mockConstructorTestingTNewFieldSetter) *FieldSetter {
	mock := &FieldSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
