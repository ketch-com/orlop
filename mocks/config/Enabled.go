// Code generated by mockery v2.14.0. DO NOT EDIT.

package config

import mock "github.com/stretchr/testify/mock"

// Enabled is an autogenerated mock type for the Enabled type
type Enabled struct {
	mock.Mock
}

type Enabled_Expecter struct {
	mock *mock.Mock
}

func (_m *Enabled) EXPECT() *Enabled_Expecter {
	return &Enabled_Expecter{mock: &_m.Mock}
}

// GetEnabled provides a mock function with given fields:
func (_m *Enabled) GetEnabled() bool {
	ret := _m.Called()

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Enabled_GetEnabled_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnabled'
type Enabled_GetEnabled_Call struct {
	*mock.Call
}

// GetEnabled is a helper method to define mock.On call
func (_e *Enabled_Expecter) GetEnabled() *Enabled_GetEnabled_Call {
	return &Enabled_GetEnabled_Call{Call: _e.mock.On("GetEnabled")}
}

func (_c *Enabled_GetEnabled_Call) Run(run func()) *Enabled_GetEnabled_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Enabled_GetEnabled_Call) Return(_a0 bool) *Enabled_GetEnabled_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewEnabled interface {
	mock.TestingT
	Cleanup(func())
}

// NewEnabled creates a new instance of Enabled. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewEnabled(t mockConstructorTestingTNewEnabled) *Enabled {
	mock := &Enabled{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
