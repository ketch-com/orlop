// Code generated by mockery v2.14.0. DO NOT EDIT.

package request

import (
	mock "github.com/stretchr/testify/mock"
	v2request "go.ketch.com/lib/orlop/v2/request"
)

// Filter is an autogenerated mock type for the Filter type
type Filter struct {
	mock.Mock
}

type Filter_Expecter struct {
	mock *mock.Mock
}

func (_m *Filter) EXPECT() *Filter_Expecter {
	return &Filter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: k
func (_m *Filter) Execute(k v2request.Key) bool {
	ret := _m.Called(k)

	var r0 bool
	if rf, ok := ret.Get(0).(func(v2request.Key) bool); ok {
		r0 = rf(k)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Filter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Filter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - k v2request.Key
func (_e *Filter_Expecter) Execute(k interface{}) *Filter_Execute_Call {
	return &Filter_Execute_Call{Call: _e.mock.On("Execute", k)}
}

func (_c *Filter_Execute_Call) Run(run func(k v2request.Key)) *Filter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(v2request.Key))
	})
	return _c
}

func (_c *Filter_Execute_Call) Return(_a0 bool) *Filter_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewFilter interface {
	mock.TestingT
	Cleanup(func())
}

// NewFilter creates a new instance of Filter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewFilter(t mockConstructorTestingTNewFilter) *Filter {
	mock := &Filter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
