// Code generated by mockery v2.14.0. DO NOT EDIT.

package request

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Setter is an autogenerated mock type for the Setter type
type Setter struct {
	mock.Mock
}

type Setter_Expecter struct {
	mock *mock.Mock
}

func (_m *Setter) EXPECT() *Setter_Expecter {
	return &Setter_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: ctx, v
func (_m *Setter) Execute(ctx context.Context, v string) context.Context {
	ret := _m.Called(ctx, v)

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, v)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Setter_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Setter_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - ctx context.Context
//  - v string
func (_e *Setter_Expecter) Execute(ctx interface{}, v interface{}) *Setter_Execute_Call {
	return &Setter_Execute_Call{Call: _e.mock.On("Execute", ctx, v)}
}

func (_c *Setter_Execute_Call) Run(run func(ctx context.Context, v string)) *Setter_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Setter_Execute_Call) Return(_a0 context.Context) *Setter_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewSetter interface {
	mock.TestingT
	Cleanup(func())
}

// NewSetter creates a new instance of Setter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSetter(t mockConstructorTestingTNewSetter) *Setter {
	mock := &Setter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
