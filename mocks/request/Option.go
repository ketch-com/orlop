// Code generated by mockery v2.14.0. DO NOT EDIT.

package request

import mock "github.com/stretchr/testify/mock"

// Option is an autogenerated mock type for the Option type
type Option struct {
	mock.Mock
}

type Option_Expecter struct {
	mock *mock.Mock
}

func (_m *Option) EXPECT() *Option_Expecter {
	return &Option_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: o
func (_m *Option) Execute(o *v2request.options) {
	_m.Called(o)
}

// Option_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type Option_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//  - o *v2request.options
func (_e *Option_Expecter) Execute(o interface{}) *Option_Execute_Call {
	return &Option_Execute_Call{Call: _e.mock.On("Execute", o)}
}

func (_c *Option_Execute_Call) Run(run func(o *v2request.options)) *Option_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*v2request.options))
	})
	return _c
}

func (_c *Option_Execute_Call) Return() *Option_Execute_Call {
	_c.Call.Return()
	return _c
}

type mockConstructorTestingTNewOption interface {
	mock.TestingT
	Cleanup(func())
}

// NewOption creates a new instance of Option. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewOption(t mockConstructorTestingTNewOption) *Option {
	mock := &Option{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
