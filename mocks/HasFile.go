// Code generated by mockery v2.14.0. DO NOT EDIT.

package orlop

import mock "github.com/stretchr/testify/mock"

// HasFile is an autogenerated mock type for the HasFile type
type HasFile struct {
	mock.Mock
}

type HasFile_Expecter struct {
	mock *mock.Mock
}

func (_m *HasFile) EXPECT() *HasFile_Expecter {
	return &HasFile_Expecter{mock: &_m.Mock}
}

// GetFile provides a mock function with given fields:
func (_m *HasFile) GetFile() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// HasFile_GetFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFile'
type HasFile_GetFile_Call struct {
	*mock.Call
}

// GetFile is a helper method to define mock.On call
func (_e *HasFile_Expecter) GetFile() *HasFile_GetFile_Call {
	return &HasFile_GetFile_Call{Call: _e.mock.On("GetFile")}
}

func (_c *HasFile_GetFile_Call) Run(run func()) *HasFile_GetFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HasFile_GetFile_Call) Return(_a0 string) *HasFile_GetFile_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewHasFile interface {
	mock.TestingT
	Cleanup(func())
}

// NewHasFile creates a new instance of HasFile. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHasFile(t mockConstructorTestingTNewHasFile) *HasFile {
	mock := &HasFile{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
