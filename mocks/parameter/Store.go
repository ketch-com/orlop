// Code generated by mockery v2.14.0. DO NOT EDIT.

package parameter

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Store is an autogenerated mock type for the Store type
type Store struct {
	mock.Mock
}

type Store_Expecter struct {
	mock *mock.Mock
}

func (_m *Store) EXPECT() *Store_Expecter {
	return &Store_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, p
func (_m *Store) Delete(ctx context.Context, p string) error {
	ret := _m.Called(ctx, p)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Store_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type Store_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//  - ctx context.Context
//  - p string
func (_e *Store_Expecter) Delete(ctx interface{}, p interface{}) *Store_Delete_Call {
	return &Store_Delete_Call{Call: _e.mock.On("Delete", ctx, p)}
}

func (_c *Store_Delete_Call) Run(run func(ctx context.Context, p string)) *Store_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_Delete_Call) Return(_a0 error) *Store_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

// List provides a mock function with given fields: ctx, p
func (_m *Store) List(ctx context.Context, p string) ([]string, error) {
	ret := _m.Called(ctx, p)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type Store_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//  - ctx context.Context
//  - p string
func (_e *Store_Expecter) List(ctx interface{}, p interface{}) *Store_List_Call {
	return &Store_List_Call{Call: _e.mock.On("List", ctx, p)}
}

func (_c *Store_List_Call) Run(run func(ctx context.Context, p string)) *Store_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_List_Call) Return(_a0 []string, _a1 error) *Store_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Read provides a mock function with given fields: ctx, p
func (_m *Store) Read(ctx context.Context, p string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, p)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]interface{}); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type Store_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//  - ctx context.Context
//  - p string
func (_e *Store_Expecter) Read(ctx interface{}, p interface{}) *Store_Read_Call {
	return &Store_Read_Call{Call: _e.mock.On("Read", ctx, p)}
}

func (_c *Store_Read_Call) Run(run func(ctx context.Context, p string)) *Store_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Store_Read_Call) Return(_a0 map[string]interface{}, _a1 error) *Store_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Write provides a mock function with given fields: ctx, p, data
func (_m *Store) Write(ctx context.Context, p string, data map[string]interface{}) (map[string]interface{}, error) {
	ret := _m.Called(ctx, p, data)

	var r0 map[string]interface{}
	if rf, ok := ret.Get(0).(func(context.Context, string, map[string]interface{}) map[string]interface{}); ok {
		r0 = rf(ctx, p, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, map[string]interface{}) error); ok {
		r1 = rf(ctx, p, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type Store_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//  - ctx context.Context
//  - p string
//  - data map[string]interface{}
func (_e *Store_Expecter) Write(ctx interface{}, p interface{}, data interface{}) *Store_Write_Call {
	return &Store_Write_Call{Call: _e.mock.On("Write", ctx, p, data)}
}

func (_c *Store_Write_Call) Run(run func(ctx context.Context, p string, data map[string]interface{})) *Store_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(map[string]interface{}))
	})
	return _c
}

func (_c *Store_Write_Call) Return(_a0 map[string]interface{}, _a1 error) *Store_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

type mockConstructorTestingTNewStore interface {
	mock.TestingT
	Cleanup(func())
}

// NewStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewStore(t mockConstructorTestingTNewStore) *Store {
	mock := &Store{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
